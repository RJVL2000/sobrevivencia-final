---
title: "Trabalho de sobrevivência"
author: "João Pedro Almeida Santos"
format: html
editor: visual
---

# Pacotes:

```{r}
pacman::p_load(
  "haven","survival","AdequacyModel","classInt","survminer","ggplot2",
  "ggsci","patchwork","gridExtra","RColorBrewer","eha","flexsurvcure",
  "psych","kableExtra", "dplyr"
)

# detach("package:rstatix", unload=TRUE)

source('./functions.R')
```

# Leitura do banco de dados

```{r}
dados <- read_sas("whas500.sas7bdat") %>%
  dplyr::filter(YEAR %in% c(2)) # Filtra coorte de análise 1-1997, 2-1999, 3-2001

tempo = dados$LENFOL
censura = dados$FSTAT
```

```{r}
# Verifica tipos dos dados
str(dados)
```

# Análise exploratória

A análise exploratória vai ser realizada de acordo com a coorte de análise.

**Função geral para calcular as descritivas**

A função análisa as variáveis de forma univariada, bivariada e em relação as curvas de sobrevivência. Para as variáveis numéricas, é realiza uma categorização automatizada pelo método do Jenks (k-means univariado).

## Análise descritiva das variáveis:

### Variável resposta

```{r}
summary(dados)
```

```{r}
ggplot(dados, aes(x = .data[['LENFOL']])) +
      geom_histogram(fill = "#4B9CD3", color = "black", bins = 30, alpha = 0.8) +
      labs(title = paste("Histograma do tempo de sobrevivência"),
           x = 'LENFOL', y = "Frequência") +
      theme_minimal(base_size = 10)

ggsave("plots/lenfol_hist.png", width = 158, height = 93, units = "mm")
```

### Variáveis explicativas - Análise univariada

```{r}
variaveis <- c("AGE","GENDER","HR","SYSBP","DIASBP","BMI","CVD","AFB","SHO","CHF","AV3","MIORD","MITYPE")

# Definir o tipo de cada variável
tipos <- ifelse(variaveis %in% c("GENDER","CVD","AFB","SHO","CHF","AV3","MIORD","MITYPE"), "categorica", "numerica")

descricoes <- c(
  "Idade na admissão hospitalar", 
  "Gênero", #0-Masculino 1- Feminino
  "Frequência Cardíaca Inicial", 
  "Pressão Sistólica Inicial",             
  "Pressão Diastólica Inicial",             
  "Índice de Massa Corporal (IMC)",         
  "Histórico de Doença Cardiovascular", #0 = Não, 1 = Sim    
  "Fibrilação Atrial",  #0 = Não, 1 = Sim                    
  "Choque Cardiogênico", #0 = Não, 1 = Sim                 
  "Complicações por Insuficiência Cardíaca", #0 = Não, 1 = Sim
  "Bloqueio Cardíaco Completo", #0 = Não, 1 = Sim             
  "Ordem do Infarto", #0 = Primeiro, 1 = Recorrente                      
  "Tipo de Infarto"#, #0 = não Q-wave, 1 = Q-wave                       
  # "Ano da Coorte",  #1 = 1997, 2 = 1999, 3 = 2001                        
  # "Data de Admissão Hospitalar",            
  # "Data de Alta Hospitalar",                
  # "Data do Último Follow-up",               
  # "Duração da Internação",                  
  # "Estado na Alta Hospitalar", # 0 = Vivo, 1 = Morto              
  # "Duração total do Follow-up",             
  # "Estado Vital no Último Follow-up" #0 = Vivo, 1 = Morto
  )
```

```{r}
matrix(c(variaveis, tipos, descricoes), ncol = 3, byrow = F)
```

```{r}
summary(dados %>% select(variaveis[tipos == "numerica"]))
```

```{r}
apply(dados %>% select(variaveis[tipos == "categorica"]) ,2, table)
```

**Resumo das numéricas**

```{r}
numericas <- dados %>% select(variaveis[tipos == "numerica"])

resumo_df <- numericas %>% psych::describe()

# Selecionar colunas desejadas
resumo_df <- resumo_df[, c("mean", "sd", "min", "median", "max")]

names(resumo_df) <- c("Média", "Desvio padrão", "Mínimo", "Mediana","Máximo")
```

```{r}
# Rodar no terminal para exibir output
kable(resumo_df, format = "latex", booktabs = TRUE, caption = "Resumo das Variáveis Numéricas", digits = 2) %>%
  kable_styling(latex_options = c("hold_position"))
```

**Frequência das categóricas**

```{r}
categoricas <- dados %>% select(variaveis[tipos == "categorica"])
tabelas_freq <- lapply(categoricas, table)

# Cria um data.frame com as frequências absolutas e relativas
lista_freqs <- lapply(names(tabelas_freq), function(var) {
  tabela <- tabelas_freq[[var]]
  df <- as.data.frame(tabela)
  colnames(df) <- c("Categoria", "Frequência")
  df$Proporcao <- round(df$Frequência / sum(df$Frequência), 4)  # proporção relativa
  df$Variável <- var
  df
})

frequencias_df <- do.call(rbind, lista_freqs)

# Reordena colunas
frequencias_df <- frequencias_df[, c("Variável", "Categoria", "Frequência", "Proporcao")]
```

```{r}
# Rodar no terminal para exibir output
kable(
  frequencias_df,
  format = "latex",
  booktabs = TRUE,
  caption = "Frequência Absoluta e Relativa das Variáveis Categóricas",
  align = c("l", "l", "r", "r"),
  digits = 2
) %>%
  kable_styling(
    latex_options = c("hold_position", "scale_down"),
  ) %>%
  collapse_rows(columns = 1, valign = "top")  # Agrupar por variável
```

### Variáveis explicativas - Análise bivariada

**Boxplots das categóricas**

```{r}
resultados_list_cat <- mapply(
  function(var, tipo) surv_exploratoria(df = dados, variavel = var, tipo = tipo),
  variaveis[tipos=="categorica"], "categorica", SIMPLIFY = FALSE
)

# Grid de boxplots
plots_box <- lapply(resultados_list_cat, function(x) x$grafico_tempo)
grid_box <- marrangeGrob(plots_box, nrow = 4, ncol = 2, top = "Boxplots")
ggsave("plots/grid_boxplots_cat.png", grid_box, width = 15, height = 10)
```

**Scatter plots das numéricas**

```{r}
resultados_list_num <- mapply(
  function(var, tipo) surv_exploratoria(df = dados, variavel = var, tipo = tipo),
  variaveis[tipos=="numerica"], "numerica", SIMPLIFY = FALSE
)

# Grid de scatterplots
plots_box <- lapply(resultados_list_num, function(x) x$grafico_tempo)
grid_box <- marrangeGrob(plots_box, nrow = 3, ncol = 2, top = "Scatter plots")
ggsave("plots/grid_scatter_num.png", grid_box, width = 15, height = 10)
```

## Modelos de sobrevivência

### Variável resposta (`LENFOL` e `FSTAT`)

**Curva de kaplan meyer com e sem censura**

```{r}
# Estimativa de sobrevivência sem covariáveis
fit_km_completo  <- survfit(Surv(LENFOL, FSTAT) ~ 1, data = dados)
fit_km_sem_censuras <- survfit(Surv(LENFOL, FSTAT) ~ 1, data = dados %>% filter(FSTAT == 1))

p1 <- ggsurvplot(
  fit_km_completo, data = dados,
  conf.int = T,            
  risk.table = F,         
  palette = "steelblue",      
  ggtheme = theme_minimal(base_size = 9),
  title = "Kaplan-Meyer completo",
  xlab = "Tempo (dias)",
  ylab = expression("S(t)"),
  censor = TRUE,
  legend = "none",
)

p2 <- ggsurvplot(
  fit_km_sem_censuras, data = dados %>% filter(FSTAT == 0),
  conf.int = T,            
  risk.table = F,         
  palette = "steelblue",      
  ggtheme = theme_minimal(base_size = 9),
  title = "Kaplan-Meyer sem censuras",
  xlab = "Tempo (dias)",
  ylab = expression("S(t)"),
  censor = TRUE,
  legend = "none",
)


(p1$plot+p2$plot)

ggsave("plots/surv_km.png", width = 158, height = 93, units = "mm")
```

**Gráfico TTT com e sem censura**

```{r}
# Calcular curvas TTT
ttt1 <- calc_ttt(dados$LENFOL)
ttt1$grupo <- "Todos os dados"

ttt2 <- calc_ttt(dados$LENFOL[dados$FSTAT == 1])
ttt2$grupo <- "Sem censura"

# Combinar os dois data.frames
ttt_df <- rbind(ttt1, ttt2)

# Plot com ggplot2
p <- ggplot(ttt_df, aes(x = rn, y = G, color = grupo, linetype = grupo)) +
  geom_line(linewidth = 1.2) +
  geom_abline(intercept = 0, slope = 1, linetype = "dotted", color = "gray40") +
  labs(
    x = expression(r/n),
    y = expression(G(r/n)),
    title = "Curvas TTT",
    color = NULL,
    linetype = NULL
  ) +
  scale_color_manual(values = c("Todos os dados" = "red", "Sem censura" = "blue")) +
  scale_linetype_manual(values = c("Todos os dados" = "dashed", "Sem censura" = "solid")) +
  theme_minimal(base_size = 14)

# Salvar em png
ggsave("plots/ttt_geral.png", plot = p, width = 7, height = 5)
```

### Variáveis explicativas

**Curvas de sobrevivência para as categóricas**

```{r}
# Grid de curvas de sobrevivência
plots_surv <- lapply(resultados_list_cat, function(x) x$grafico_sobrevivencia)
grid_surv <- marrangeGrob(plots_surv, nrow = 3, ncol = 2, top = "Curvas de Sobrevivência")
ggsave("plots/grid_sobrevivencia_cat.png", grid_surv, width = 15, height = 10)
```

**Curvas de sobrevivência para as numéricas**

```{r}
# Grid de curvas de sobrevivência
plots_surv <- lapply(resultados_list_num, function(x) x$grafico_sobrevivencia)
grid_surv <- marrangeGrob(plots_surv, nrow = 4, ncol = 2, top = "Curvas de Sobrevivência")
ggsave("plots/grid_sobrevivencia_num.png", grid_surv, width = 15, height = 10)
```

**Testes de logrank**

```{r}
res_cat = lapply(resultados_list_cat, function(x) x$wilcoxon_test)
```

```{r}
res_num = lapply(resultados_list_num, function(x) x$wilcoxon_test)
```

```{r}
# Aplicar a função a todos os elementos
tabela_resumo <- bind_rows(
  lapply(names(res_num), function(n) extrair_resumo(n, res_num[[n]])),
  lapply(names(res_cat), function(n) extrair_resumo(n, res[[n]]))
)

# Formatar p-valor
tabela_resumo <- tabela_resumo %>%
  mutate(p_valor_formatado = ifelse(p_valor < 0.001, "< 0.001", p_valor))

# Exibir com kableExtra
latex <- tabela_resumo %>%
  select(Variável, Chisq, df, `p-valor` = p_valor_formatado) %>%
  kable(
    format = "latex",
    digits = 3,
    caption = "Resumo dos testes de Wilcoxon (rho = 1)",
    booktabs = TRUE,
    linesep = ""
  ) %>%
  kable_styling(
    latex_options = c("hold_position"),
    full_width = FALSE
  )
```

**Gráficos TTT categóricas**

```{r}
plot_ttt_grid(
  data = dados,
  tempo_var = "LENFOL",
  status_var = "FSTAT",
  vars_grupo = variaveis[tipos == "categorica"],
  ncol = 3,
  output = "plots/ttt_grid_cat.png",
  tipo = "categorica"
)
```

**Gráficos TTT numéricas**

```{r}
plot_ttt_grid(
  data = dados,
  tempo_var = "LENFOL",
  status_var = "FSTAT",
  vars_grupo = variaveis[tipos == "numerica"],
  ncol = 3,
  output = "plots/ttt_grid_num.png",
  tipo = "numerica"
)
```

## Verificação da distribuição mais adequada:

```{r}
# Ajustar modelos
fit_exp <- flexsurvreg(Surv(LENFOL, FSTAT) ~ 1, data = dados, dist = "exp")
fit_wei <- flexsurvreg(Surv(LENFOL, FSTAT) ~ 1, data = dados, dist = "weibull")
fit_lnorm <- flexsurvreg(Surv(LENFOL, FSTAT) ~ 1, data = dados, dist = "lnorm")
```

```{r}
# Criar data.frame com sobrevivência estimada
tempo_seq <- seq(0, max(dados$LENFOL), length.out = 100)
df_param <- data.frame(
  tempo = rep(tempo_seq, 3),
  surv = c(summary(fit_exp, t = tempo_seq)[[1]]$est,
           summary(fit_wei, t = tempo_seq)[[1]]$est,
           summary(fit_lnorm, t = tempo_seq)[[1]]$est),
  modelo = rep(c("Exponencial", "Weibull", "Log-Normal"), each = length(tempo_seq))
)

km_plot <- ggsurvplot(
  fit_km_completo, data = dados,
  conf.int = F,            
  risk.table = F,         
  palette = "steelblue",      
  ggtheme = theme_minimal(base_size = 9),
  title = "Kaplan-Meyer completo",
  xlab = "Tempo (dias)",
  ylab = expression("S(t)"),
  censor = TRUE,
  legend = "none",
)

# Plot final com cores NPG
km_plot$plot +
  geom_line(data = df_param, aes(x = tempo, y = surv, color = modelo), size = 1) +
  scale_color_npg(name = "Modelo") +
  labs(title = "Kaplan-Meier + Ajustes Paramétricos",
       y = "Sobrevivência", x = "Tempo") +
  theme_minimal()

ggsave("plots/dist_test.png", width = 158, height = 93, units = "mm")
```

```{r}
# Número de observações
n <- nrow(dados)

# Calcular BIC manualmente
bic_manual <- function(fit) {
  -2 * logLik(fit)[1] + length(coef(fit)) * log(n)
}

latex <- data.frame(
  Modelo = c("Exponencial", "Weibull", "Log-Normal"),
  BIC = c(bic_manual(fit_exp), bic_manual(fit_wei), bic_manual(fit_lnorm)),
  AIC = c(AIC(fit_exp), AIC(fit_wei), AIC(fit_lnorm))
) %>%
  kable(
    format = "latex",
    digits = 2,
    caption = "AIC e BIC para avaliação dos modelos",
    booktabs = TRUE,
    linesep = ""
  ) %>%
  kable_styling(
    latex_options = c("hold_position"),
    full_width = FALSE
  )
```